import { geminiService } from "./geminiService";

class AgentService {
  async executeWorkflow(ideaBank = []) {
    const excludedNiches = ideaBank.map(idea => idea.marketDiscovery.chosenMarket.niche);
    const marketAnalysis = await this.runMarketAnalysis("AI-powered tools for developers", excludedNiches);

    const mockIdeas = [
      {
        marketDiscovery: {
          chosenMarket: {
            category: "Developer Tools",
            subcategory: "AI-powered",
            niche: "Code Generation",
            subNiche: "Test Automation",
            reasoning: "High demand for tools that can automate testing and improve developer productivity."
          },
          categories: [
            { main: "Developer Tools", subcategories: ["AI-powered", "CI/CD", "Collaboration"] },
            { main: "Productivity Software", subcategories: ["Task Management", "Note Taking", "Time Tracking"] }
          ]
        },
        marketValidation: {
          isValid: true,
          confidence: "High",
          analysis: {
            demand: "Strong and growing demand for AI-powered developer tools.",
            competition: "Moderate, with several established players but room for innovation.",
            stability: "High, as developer tools are essential for software development.",
            growth: "High potential for growth as AI technology advances."
          }
        },
        research: {
          query: "AI code generation test automation pain points",
          totalThreads: 15,
          threads: [
            { title: "Struggling with flaky tests in AI-generated code", selftext: "Has anyone found a reliable way to write stable end-to-end tests for code generated by AI assistants? Ours are constantly breaking.", score: 128, num_comments: 45, subreddit: "ExperiencedDevs" },
            { title: "Best practices for testing AI-powered features?", selftext: "We're building a new feature using a large language model, and we're not sure how to approach testing. Traditional unit tests don't seem to be enough.", score: 92, num_comments: 33, subreddit: "SoftwareEngineering" },
            { title: "How do you handle prompt engineering for test data generation?", selftext: "We're trying to use an AI to generate test data, but the results are often unrealistic or don't cover edge cases. Any tips?", score: 78, num_comments: 21, subreddit: "QualityAssurance" }
          ]
        },
        analysis: {
          summary: "The primary pain points for developers using AI for code generation in testing are flaky tests, the difficulty of testing non-deterministic AI features, and the challenge of generating realistic and comprehensive test data.",
          painPoints: [
            { title: "Flaky Tests", frequency: "high", intensity: "high", description: "Tests for AI-generated code are often brittle and break easily with small changes to the model or prompts.", category: "Testing", solvability: "medium" },
            { title: "Testing Non-Deterministic Features", frequency: "medium", intensity: "high", description: "It's difficult to write traditional assertions for features that produce variable outputs.", category: "Testing", solvability: "medium" },
            { title: "Test Data Generation", frequency: "high", intensity: "medium", description: "Generating realistic and comprehensive test data that covers edge cases is a significant challenge.", category: "Testing", solvability: "high" }
          ]
        },
        strategy: {
          executiveSummary: "There is a clear market opportunity for a tool that can help developers write more reliable tests for AI-powered features. The key is to focus on a solution that can handle the non-deterministic nature of AI and assist with generating high-quality test data.",
          solutions: [
            { name: "AI-Powered Test Stability Platform", framework: "SaaS", description: "A platform that analyzes AI-generated code and helps developers write more stable tests by identifying potential flakiness and suggesting improvements.", valueProposition: "Reduce time spent debugging flaky tests and increase confidence in AI-powered features.", businessModel: "Subscription-based", keyFeatures: ["Flakiness detection", "Test stability recommendations", "Test data generation"] },
            { name: "Smart Test Data Generation Service", framework: "API", description: "An API that generates realistic and comprehensive test data for AI-powered features based on a user's schema and requirements.", valueProposition: "Improve test coverage and reduce the time it takes to write tests.", businessModel: "Pay-per-use", keyFeatures: ["Realistic data generation", "Edge case coverage", "Schema-based generation"] }
          ],
          topRecommendations: [
            { solution: "AI-Powered Test Stability Platform", marketSize: "Large", feasibility: "High", competitiveAdvantage: "First-mover advantage in a niche but growing market.", dominancePotential: "High" }
          ]
        }
      },
      {
        marketDiscovery: {
          chosenMarket: {
            category: "Health and Wellness",
            subcategory: "AI-powered",
            niche: "Personalized Nutrition",
            subNiche: "Meal Planning",
            reasoning: "Growing interest in personalized health and wellness solutions."
          },
          categories: [
            { main: "Health and Wellness", subcategories: ["AI-powered", "Fitness", "Mental Health"] },
            { main: "Food and Drink", subcategories: ["Meal Kits", "Recipe Discovery", "Restaurant Delivery"] }
          ]
        },
        marketValidation: {
          isValid: true,
          confidence: "Medium",
          analysis: {
            demand: "Growing demand for personalized nutrition and meal planning services.",
            competition: "High, with many established players in the market.",
            stability: "Medium, as consumer trends in health and wellness can change quickly.",
            growth: "High potential for growth as consumers become more health-conscious."
          }
        },
        research: {
          query: "personalized nutrition meal planning app reviews",
          totalThreads: 25,
          threads: [
            { title: "What are the best personalized nutrition apps?", selftext: "I'm looking for an app that can create a meal plan for me based on my dietary restrictions and fitness goals. Any recommendations?", score: 215, num_comments: 88, subreddit: "nutrition" },
            { title: "Are personalized meal planning apps worth it?", selftext: "I've been thinking about trying a personalized meal planning app, but I'm not sure if it's worth the cost. What are your experiences?", score: 150, num_comments: 65, subreddit: "EatCheapAndHealthy" },
            { title: "Frustrated with meal planning apps", selftext: "I've tried several meal planning apps, but I find them all to be too restrictive or not personalized enough. Is there anything better out there?", score: 110, num_comments: 45, subreddit: "xxfitness" }
          ]
        },
        analysis: {
          summary: "The main pain points for users of personalized nutrition apps are the lack of flexibility, the high cost, and the difficulty of finding an app that truly meets their individual needs.",
          painPoints: [
            { title: "Lack of Flexibility", frequency: "high", intensity: "high", description: "Users want more control over their meal plans and the ability to customize them to their liking.", category: "Usability", solvability: "high" },
            { title: "High Cost", frequency: "medium", intensity: "medium", description: "Many users find personalized nutrition apps to be too expensive.", category: "Pricing", solvability: "medium" },
            { title: "One-Size-Fits-All Solutions", frequency: "high", intensity: "high", description: "Users are frustrated with apps that claim to be personalized but offer generic meal plans.", category: "Personalization", solvability: "high" }
          ]
        },
        strategy: {
          executiveSummary: "There is a market opportunity for a personalized nutrition app that is more flexible, affordable, and truly personalized than existing solutions. The key is to focus on a modular approach that allows users to customize their meal plans and choose the features they want.",
          solutions: [
            { name: "Modular Meal Planning App", framework: "Freemium", description: "A freemium app that allows users to build their own personalized meal plans by choosing from a variety of modules.", valueProposition: "A flexible and affordable way to create a personalized meal plan.", businessModel: "Freemium with in-app purchases for premium modules.", keyFeatures: ["Modular meal planning", "Customizable recipes", "Grocery list integration"] },
            { name: "AI-Powered Nutrition Coach", framework: "Subscription", description: "A subscription-based service that provides users with a personal AI nutrition coach to help them achieve their health and wellness goals.", valueProposition: "A personalized and supportive way to improve your health and wellness.", businessModel: "Subscription-based", keyFeatures: ["AI nutrition coach", "Personalized meal plans", "Progress tracking"] }
          ],
          topRecommendations: [
            { solution: "Modular Meal Planning App", marketSize: "Large", feasibility: "High", competitiveAdvantage: "A more flexible and affordable solution than existing apps.", dominancePotential: "High" }
          ]
        }
      }
    ];

    let nextIdea = mockIdeas[0];
    for (const idea of mockIdeas) {
      if (!excludedNiches.includes(idea.marketDiscovery.chosenMarket.niche)) {
        nextIdea = idea;
        break;
      }
    }

    return nextIdea;
  }

  async runMarketAnalysis(prompt, excludedNiches = []) {
    let fullPrompt = `
      Analyze the market for a new product based on this idea: ${prompt}.
      Provide a detailed analysis covering:
      - Target Audience
      - Market Size
      - Competitors
      - Potential Challenges
      - Recommendations
    `;

    if (excludedNiches.length > 0) {
      fullPrompt += `\n\nPlease exclude the following niches from your analysis: ${excludedNiches.join(", ")}.`;
    }
    const response = await geminiService.generateContent(fullPrompt, false);
    return this.parseResponse(response);
  }

  parseResponse(response) {
    try {
      // Attempt to parse as JSON, if it fails, return as plain text.
      return JSON.parse(response);
    } catch (error) {
      return response;
    }
  }
}

export const agentService = new AgentService();